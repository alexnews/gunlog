#!/usr/bin/env python3
"""
Fixed Index Generator with Summary Links

This script creates index.html files for all projects and their date directories,
with improved handling of special characters in project names and inclusion of
summary reports generated by gunlog_daily_summary.py.

Usage:
    python gunlog_index_generator.py

Requirements:
    - Configuration file (config.py) with path settings
"""

import os
import glob
import datetime
import re
import sys

# Import configuration
try:
    from config import PROJECTS_CSV, OUTPUT_BASE_DIR, DATE_FORMAT
except ImportError:
    print("Error: config.py file not found! Please create it with the required settings.")
    OUTPUT_BASE_DIR = "/usr/local/www/dart-studio.com/www/gunlog/"
    DATE_FORMAT = "%Y%m%d"
    PROJECTS_CSV = "/usr/local/www/dart-studio.com/www/gunlog/list_projects.csv"
    print(f"Using default settings: OUTPUT_BASE_DIR={OUTPUT_BASE_DIR}, DATE_FORMAT={DATE_FORMAT}")

def create_main_index(output_base_dir):
    """
    Create the main index.html file that lists all projects.
    
    Args:
        output_base_dir: Base directory for all projects
    
    Returns:
        str: Path to the generated index file
    """
    index_file = os.path.join(output_base_dir, "index.html")
    
    # Get all project directories
    project_dirs = []
    for item in os.listdir(output_base_dir):
        item_path = os.path.join(output_base_dir, item)
        if os.path.isdir(item_path) and not item.startswith('.'):
            project_dirs.append(item)
    
    # Sort project directories
    project_dirs.sort()
    
    # Create the main index file
    with open(index_file, 'w', encoding='utf-8') as f:
        f.write("""<!DOCTYPE html>
<html>
<head>
    <title>GunLog Web Project Analysis</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        h1, h2 { color: #333; }
        ul { list-style-type: none; padding: 0; }
        li { margin: 10px 0; }
        a { color: #0066cc; text-decoration: none; }
        a:hover { text-decoration: underline; }
        .dashboard { display: flex; flex-wrap: wrap; gap: 20px; }
        .card { border: 1px solid #ddd; border-radius: 8px; padding: 15px; width: 200px; }
        .card h3 { margin-top: 0; color: #0066cc; }
    </style>
</head>
<body>
    <h1>GunLog Web Project Analysis</h1>
    <p>Last updated: """ + datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S') + """</p>
    
    <h2>Projects</h2>
    <div class="dashboard">
""")
        
        for project_dir in project_dirs:
            # Convert directory name back to project name for display
            # This handles both formats: with underscore and with hyphen
            project_display = project_dir.replace('_', '.')
            if '-' in project_dir:
                # Special case for directories with hyphens, like kargin-utkin_com
                parts = project_dir.split('_')
                if len(parts) == 2:
                    project_display = f"{parts[0]}.{parts[1]}"
            
            f.write(f"""
        <div class="card">
            <h3>{project_display}</h3>
            <a href="{project_dir}/index.html">View Reports</a>
        </div>
""")
        
        f.write("""
    </div>
</body>
</html>
""")
    
    print(f"Created main index: {index_file}")
    return index_file

def create_project_index(project_dir):
    """
    Create an index.html file for a project.
    
    Args:
        project_dir: Path to the project directory
    
    Returns:
        str: Path to the generated index file
    """
    index_file = os.path.join(project_dir, "index.html")
    
    # Get project name from directory
    project_name = os.path.basename(project_dir)
    
    # Convert directory name to display name
    project_display = project_name.replace('_', '.')
    if '-' in project_name:
        # Special case for directories with hyphens, like kargin-utkin_com
        parts = project_name.split('_')
        if len(parts) == 2:
            project_display = f"{parts[0]}.{parts[1]}"
    
    # Get all date directories
    date_dirs = []
    all_reports = []
    
    # Check for date directories (all numeric directories)
    for item in os.listdir(project_dir):
        item_path = os.path.join(project_dir, item)
        if os.path.isdir(item_path) and item.isdigit():
            date_dirs.append(item)
        elif os.path.isfile(item_path) and item.endswith((".html", ".txt")):
            # Also collect all reports in the main directory
            all_reports.append(item)
    
    # Sort date directories (newest first)
    date_dirs.sort(reverse=True)
    
    # Create the project index file
    with open(index_file, 'w', encoding='utf-8') as f:
        f.write(f"""<!DOCTYPE html>
<html>
<head>
    <title>Project Summary for {project_display}</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; }}
        h1, h2 {{ color: #333; }}
        ul {{ list-style-type: none; padding: 0; }}
        li {{ margin: 10px 0; }}
        a {{ color: #0066cc; text-decoration: none; }}
        a:hover {{ text-decoration: underline; }}
        .nav {{ margin-bottom: 20px; padding: 10px; background-color: #f5f5f5; }}
    </style>
</head>
<body>
    <div class="nav">
        <a href="../index.html">‚Üê All Projects</a>
    </div>

    <h1>Project Summary for {project_display}</h1>
    <p>Last updated: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
    
    <h2>Daily Reports</h2>
    <ul>
""")
        
        # Add links to daily reports
        for date_dir in date_dirs:
            date_index = os.path.join(project_dir, date_dir, "index.html")
            if os.path.exists(date_index):
                # Format date for display (YYYYMMDD to YYYY-MM-DD)
                formatted_date = f"{date_dir[:4]}-{date_dir[4:6]}-{date_dir[6:]}"
                f.write(f"""
        <li><a href="{date_dir}/index.html">{formatted_date} Dashboard</a></li>
""")
        
        # Check for summary reports generated by gunlog_daily_summary.py
        summary_reports = []
        daily_access_counts = None
        daily_error_counts = None
        monthly_summary = None
        monthly_error_summary = None
        
        # First check for specific report names
        for report in all_reports:
            if "_daily_access_counts." in report:
                daily_access_counts = report
            elif "_daily_error_counts." in report:
                daily_error_counts = report
            elif "_monthly_summary." in report:
                monthly_summary = report
            elif "_monthly_error_summary." in report:
                monthly_error_summary = report
        
        # Add summary reports section if any were found
        if daily_access_counts or daily_error_counts or monthly_summary or monthly_error_summary:
            f.write("""
    </ul>
    
    <h2>Summary Reports</h2>
    <ul>
""")
            
            if daily_access_counts:
                f.write(f"""
        <li><a href="{daily_access_counts}">Daily Access Records</a></li>
""")
            
            if daily_error_counts:
                f.write(f"""
        <li><a href="{daily_error_counts}">Daily Error Counts</a></li>
""")
            
            if monthly_summary:
                f.write(f"""
        <li><a href="{monthly_summary}">Monthly Summary</a></li>
""")
            
            if monthly_error_summary:
                f.write(f"""
        <li><a href="{monthly_error_summary}">Monthly Error Summary</a></li>
""")
        
        # Find all standard analytics reports (grouped by type)
        analytics_reports = {}
        for report in all_reports:
            if "_report_" in report and report not in summary_reports:
                if report.endswith(".html"):  # Prefer HTML reports
                    report_type = report.split("_report_")[0]
                    analytics_reports[report_type] = report
        
        # Add fallback to text reports if HTML not found
        for report in all_reports:
            if "_report_" in report and report not in summary_reports:
                if report.endswith(".txt"):
                    report_type = report.split("_report_")[0]
                    if report_type not in analytics_reports:
                        analytics_reports[report_type] = report
        
        # Add analytics reports section if any were found
        if analytics_reports:
            f.write("""
    </ul>
    
    <h2>Analytics Reports</h2>
    <ul>
""")
            
            # Friendly names for report types
            report_names = {
                "error": "Error Analytics",
                "ip": "IP Analytics",
                "traffic": "Traffic Analytics",
                "performance": "Performance Analytics",
                "security": "Security Analytics",
                "seo": "SEO Analytics",
                "content": "Content Analytics",
                "pages": "Page Analytics"
            }
            
            # Add links for each report type (sorted by name)
            for report_type, report in sorted(analytics_reports.items()):
                display_name = report_names.get(report_type, f"{report_type.capitalize()} Analytics")
                f.write(f"""
        <li><a href="{report}">{display_name}</a></li>
""")
        
        f.write("""
    </ul>
</body>
</html>
""")
    
    print(f"Created project index: {index_file}")
    return index_file

def create_daily_index(project_dir, date_dir):
    """
    Create an index.html file in the date directory that links to all analytics reports.
    
    Args:
        project_dir: Path to the project directory
        date_dir: Path to the date directory
    
    Returns:
        str: Path to the generated index file
    """
    project_name = os.path.basename(project_dir)
    date_str = os.path.basename(date_dir)
    
    # Convert directory name to display name
    project_display = project_name.replace('_', '.')
    if '-' in project_name:
        # Special case for directories with hyphens, like kargin-utkin_com
        parts = project_name.split('_')
        if len(parts) == 2:
            project_display = f"{parts[0]}.{parts[1]}"
    
    formatted_date = f"{date_str[:4]}-{date_str[4:6]}-{date_str[6:]}"
    index_file = os.path.join(date_dir, "index.html")
    
    # Get all report files in the date directory
    report_files = []
    for ext in ['html', 'txt', 'csv', 'json', 'xml']:
        report_files.extend(glob.glob(os.path.join(date_dir, f"*_report_*.{ext}")))
    
    # Extract report types
    report_types = {}
    for report_file in report_files:
        basename = os.path.basename(report_file)
        match = re.match(r'(\w+)_report_', basename)
        if match:
            report_type = match.group(1)
            if report_type not in report_types:
                report_types[report_type] = []
            report_types[report_type].append(report_file)
    
    # Report type descriptions
    descriptions = {
        "error": "Error log analysis showing PHP errors and warnings",
        "ip": "Analysis of visitor IP addresses and their frequency",
        "traffic": "Website traffic analysis and visitor statistics",
        "performance": "Website performance metrics and loading times",
        "security": "Security-related events and potential threats",
        "seo": "Search engine optimization metrics and rankings",
        "content": "Content analysis and most viewed pages",
        "pages": "Analysis of most popular pages and content",
    }
    
    # Create index.html
    with open(index_file, 'w', encoding='utf-8') as f:
        f.write(f"""<!DOCTYPE html>
<html>
<head>
    <title>Analytics Dashboard for {project_display} - {formatted_date}</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; }}
        h1, h2, h3 {{ color: #333; }}
        .dashboard {{ display: flex; flex-wrap: wrap; gap: 20px; }}
        .card {{ border: 1px solid #ddd; border-radius: 8px; padding: 15px; width: 300px; }}
        .card h3 {{ margin-top: 0; color: #0066cc; }}
        .card-content {{ margin-top: 10px; }}
        ul {{ list-style-type: none; padding: 0; margin: 0; }}
        li {{ margin-bottom: 8px; }}
        a {{ color: #0066cc; text-decoration: none; }}
        a:hover {{ text-decoration: underline; }}
        .nav {{ margin-bottom: 20px; padding: 10px; background-color: #f5f5f5; }}
        .description {{ color: #666; font-size: 0.9em; margin-top: 5px; }}
    </style>
</head>
<body>
    <div class="nav">
        <a href="../../index.html">‚Üê All Projects</a> |
        <a href="../index.html">‚Üê {project_display} Summary</a>
    </div>
    
    <h1>Analytics Dashboard for {project_display}</h1>
    <p>Date: {formatted_date}</p>
    
    <div class="dashboard">
""")
    
        # Add cards for each report type
        for report_type, files in sorted(report_types.items()):
            f.write(f"""
        <div class="card">
            <h3>{report_type.title()} Analytics</h3>
            <p class="description">{descriptions.get(report_type, "Analysis report")}</p>
            <div class="card-content">
                <ul>
""")
            
            for file in files:
                file_basename = os.path.basename(file)
                file_ext = os.path.splitext(file_basename)[1]
                
                # Create a friendly label based on the file extension
                if file_ext == '.html':
                    label = 'HTML Report'
                elif file_ext == '.txt':
                    label = 'Text Report'
                elif file_ext == '.csv':
                    label = 'CSV Data'
                elif file_ext == '.json':
                    label = 'JSON Data'
                elif file_ext == '.xml':
                    label = 'XML Report'
                else:
                    label = file_basename
                
                f.write(f"""
                    <li><a href="{file_basename}">{label}</a></li>
""")
            
            f.write("""
                </ul>
            </div>
        </div>
""")
        
        # If there are no reports yet, show a message
        if not report_types:
            f.write("""
        <div class="card">
            <h3>No Reports Available</h3>
            <p>No analytics reports have been generated for this date yet.</p>
        </div>
""")
        
        # Add cards for common report types that aren't present yet
        for report_type, description in descriptions.items():
            if report_type not in report_types:
                f.write(f"""
        <div class="card">
            <h3>{report_type.title()} Analytics</h3>
            <p class="description">{description}</p>
            <div class="card-content">
                <p>No {report_type} reports available for this date yet.</p>
            </div>
        </div>
""")
        
        f.write("""
    </div>
</body>
</html>
""")
    
    print(f"Created daily index: {index_file}")
    return index_file

def update_all_indexes():
    """Update all project and date indexes."""
    print(f"Scanning directory: {OUTPUT_BASE_DIR}")
    
    # Create main index
    create_main_index(OUTPUT_BASE_DIR)
    
    # Find all project directories
    for item in os.listdir(OUTPUT_BASE_DIR):
        project_dir = os.path.join(OUTPUT_BASE_DIR, item)
        if os.path.isdir(project_dir) and not item.startswith('.'):
            print(f"Processing project directory: {item}")
            
            # Create project index
            create_project_index(project_dir)
            
            # Find all date directories
            for date_item in os.listdir(project_dir):
                date_dir = os.path.join(project_dir, date_item)
                if os.path.isdir(date_dir) and date_item.isdigit():
                    print(f"  Creating index for date: {date_item}")
                    
                    # Create date index
                    create_daily_index(project_dir, date_dir)

def main():
    """Main function."""
    print("Fixed Index Generator with Summary Links")
    print("-" * 40)
    
    # Check for specific project to update
    if len(sys.argv) > 1:
        project_name = sys.argv[1]
        project_dir = os.path.join(OUTPUT_BASE_DIR, project_name)
        
        if not os.path.isdir(project_dir):
            print(f"Project directory not found: {project_dir}")
            return
        
        print(f"Updating indexes for project: {project_name}")
        
        # Create project index
        create_project_index(project_dir)
        
        # Find all date directories
        for date_item in os.listdir(project_dir):
            date_dir = os.path.join(project_dir, date_item)
            if os.path.isdir(date_dir) and date_item.isdigit():
                print(f"  Creating index for date: {date_item}")
                
                # Create date index
                create_daily_index(project_dir, date_dir)
    else:
        # Update all indexes
        update_all_indexes()
    
    print("\nCompleted successfully!")

if __name__ == "__main__":
    main()
